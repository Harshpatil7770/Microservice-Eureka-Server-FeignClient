package com.xoriant.ecart.resource;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.xoriant.ecart.model.Product;
import com.xoriant.ecart.service.ProductService;

@RequestMapping("/api/product")
@RestController
public class ProductResource {

	@Autowired
	private ProductService productService;

	@PostMapping("/save")
	public String addNewProduct(@RequestBody Product product) {
		productService.addNewProduct(product);
		String response = "New Product Added Succesfully !";
		return response;
	}

	@PostMapping("/saveAll")
	List<Product> addNewListofProduct(@RequestBody List<Product> prodLists) {
		return productService.addNewListofProduct(prodLists);

	}

	@PutMapping("/update")
	Product updateProduct(@RequestBody Product product) {
		return productService.updateProduct(product);
	}

	@PutMapping("/updateAll")
	List<Product> updateProductLists(@RequestBody List<Product> prodLists) {
		return productService.updateProductLists(prodLists);
	}

	@GetMapping("/{productId}")
	Optional<Product> findById(int productId) {
		return productService.findById(productId);
	}

	@GetMapping("find/{productName}")
	Optional<Product> findByProductName(String productName) {
		return productService.findByProductName(productName);
	}

	@GetMapping("/findAll")
	List<Product> fetchAll() {
		return productService.fetchAll();
	}

	@GetMapping("/findAll/sorted")
	List<Product> fetchByAlphabeticalOrder() {
		return productService.fetchByAlphabeticalOrder();
	}

	void deleteProduct(int productId) {
		productService.deleteProduct(productId);
	}

	List<Product> findByPriceLessThan(double minPrice) {
		return productService.findByPriceLessThan(minPrice);
	}

	List<Product> findByPriceGreaterThan(Double maxPrice) {
		return productService.findByPriceGreaterThan(maxPrice);
	}

	List<Product> findByPriceIsBetween(double minPrice, double maxPrice) {
		return productService.findByPriceIsBetween(minPrice, maxPrice);
	}
}
